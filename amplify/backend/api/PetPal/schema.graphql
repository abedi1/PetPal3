type ChatRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  Users: [User] @manyToMany(relationName: "ChatRoomUser")
  LastMessage: Message @hasOne
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  text: String!
  chatroomID: ID!
    @index(
      name: "byChatRoom"
      sortKeyFields: ["createdAt"]
      queryField: "listMessagesByChatRoom"
    )
  userID: ID! @index(name: "byUser")
}

type Match @model @auth(rules: [{allow: public}]) {
  id: ID!
  User1: User @hasOne
  User2: User @hasOne
  isMatch: Boolean!
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  bio: String!
  hasPet: Boolean!
  image: String
  sub: String!
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  chatrooms: [ChatRoom] @manyToMany(relationName: "ChatRoomUser")
}
 